{"version":3,"sources":["utils/RecordsAPI.js","components/Record.js","components/RecordForm.js","components/AmountBox.js","components/Records.js","serviceWorker.js","index.js"],"names":["api","process","REACT_APP_RECORDS_API_URL","Record","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","edit","handleDelete","bind","assertThisInitialized","setState","event","_this2","preventDefault","id","body","record","date","refs","value","title","amount","Number","parseInt","props","axios","put","concat","then","response","handleEditRecord","data","catch","error","console","log","message","_this3","delete","handleDeleteRecord","_this4","react_default","a","createElement","className","onClick","handleToggle","e","window","confirm","type","defaultValue","ref","inputMode","handleEdit","recordForm","recordRow","Component","RecordForm","Date","name","obj","target","moment","format","post","handleNewRecord","onSubmit","handleSubmit","es","placeholder","dateFormat","selected","onChange","handleDateChange","handleChange","disabled","valid","AmountBox","_ref","text","Records","isLoaded","records","isAsc","compareBy","handleSortClick","get","toConsumableArray","recordIndex","indexOf","newRecords","map","item","index","objectSpread","filter","credits","reduce","prev","curr","debits","key","b","arrayCopy","sort","recordsComponent","_this$state","Record_Record","updateRecord","deleteRecord","role","components_AmountBox","balance","RecordForm_RecordForm","addRecord","Boolean","location","hostname","match","ReactDOM","render","components_Records","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09dc77e3.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst api = process.env.REACT_APP_RECORDS_API_URL || \"https://5d0196579ce12c0014e0ed5b.mockapi.io\"\r\n\r\nexport const getAll = () =>\r\n  axios.get(`${api}/api/v1/records`)\r\n\r\nexport const create = (body) =>\r\n  axios.post(`${api}/api/v1/records`, body)\r\n\r\nexport const update = (id, body) =>\r\n  axios.put(`${api}/api/v1/records/${id}`, body)\r\n\r\nexport const remove = (id) =>\r\n  axios.delete(`${api}/api/v1/records/${id}`)\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as RecordsAPI from '../utils/RecordsAPI';\r\n\r\nexport default class Record extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      edit: false\r\n    };\r\n    this.handleDelete.bind(this);\r\n  }\r\n\r\n  handleToggle() {\r\n    this.setState({\r\n      edit: !this.state.edit\r\n    });\r\n  }\r\n\r\n  handleEdit(event) {\r\n    event.preventDefault();\r\n    const record = {\r\n      date: this.refs.date.value,\r\n      title: this.refs.title.value,\r\n      amount: Number.parseInt(this.refs.amount.value, 0)\r\n    }\r\n    RecordsAPI.update(this.props.record.id, record).then(\r\n      response => {\r\n        this.props.handleEditRecord(this.props.record, response.data);\r\n        this.setState({edit: false});\r\n      }\r\n    ).catch(\r\n      error => console.log(error.message)\r\n    )\r\n  }\r\n\r\n  handleDelete(event) {\r\n    event.preventDefault();\r\n    RecordsAPI.remove(this.props.record.id).then(\r\n      response => this.props.handleDeleteRecord(this.props.record)\r\n    ).catch(\r\n      error => console.log(error.message)\r\n    )\r\n  }\r\n\r\n  recordRow() {\r\n    return (\r\n      <tr>\r\n        <td>{this.props.record.date}</td>\r\n        <td>{this.props.record.title}</td>\r\n        <td>{this.props.record.amount}</td>\r\n        <td>\r\n          <button className=\"btn\" onClick={this.handleToggle.bind(this)}><i className=\"fa fa-edit\"></i><span></span></button>\r\n          <button className=\"btn\" \r\n            onClick={(e) => { if (window.confirm('Are you sure you wish to delete this item?')) this.handleDelete(e) } } > \r\n              <i className=\"far fa-trash-alt\"></i><span></span>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  recordForm() {\r\n    return (\r\n      <tr>\r\n        <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.date} ref=\"date\" /></td>\r\n        <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.title} ref=\"title\" /></td>\r\n        <td><input type=\"number\" inputMode=\"numeric\" className=\"form-control\" defaultValue={this.props.record.amount} ref=\"amount\" /></td>\r\n        <td>\r\n          <button className=\"btn\" onClick={this.handleEdit.bind(this)}><i className=\"fas fa-check\"></i></button>\r\n          <button className=\"btn\" onClick={this.handleToggle.bind(this)}><i className=\"fas fa-times\"></i></button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.edit) {\r\n      return this.recordForm();\r\n    } else {\r\n      return this.recordRow();\r\n    }\r\n  }\r\n}\r\n\r\nRecord.propTypes = {\r\n  record: PropTypes.object\r\n}\r\n","import React, { Component } from 'react';\r\nimport * as RecordsAPI from '../utils/RecordsAPI';\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from 'moment';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default class RecordForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: new Date(),\r\n      title: \"\",\r\n      amount: \"\"\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    let name, obj;\r\n    name = event.target.name;\r\n    this.setState((\r\n      obj = {},\r\n      obj[\"\" + name] = event.target.value,\r\n      obj\r\n    ))\r\n    \r\n  }\r\n  handleDateChange(date) {\r\n    this.setState({\r\n      date: date\r\n    });\r\n  }\r\n  valid() {\r\n    return this.state.date && this.state.title && this.state.amount\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const data = {\r\n      date: moment(this.state.date).format(\"DD/MM/YYYY\"),\r\n      title: this.state.title,\r\n      amount: Number.parseInt(this.state.amount, 0)\r\n    };\r\n    \r\n    RecordsAPI.create(data).then(\r\n      response => {\r\n        this.props.handleNewRecord(response.data);\r\n        this.setState({\r\n          date: new Date(),\r\n          title: \"\",\r\n          amount: \"\"\r\n        })\r\n      }\r\n    ).catch(\r\n      error => console.log(error.message)\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"form-inline mb-3\" onSubmit={this.handleSubmit.bind(this)}>\r\n        <div className=\"form-group mr-1\">\r\n          <DatePicker className=\"form-control\"  placeholder=\"Date\" name=\"date\" \r\n              dateFormat=\"dd/MM/yyyy\"\r\n              value={this.state.date}\r\n              selected={this.state.date}\r\n              onChange={this.handleDateChange.bind(this)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group mr-1\">\r\n          <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"Title\" name=\"title\" value={this.state.title} />\r\n        </div>\r\n        <div className=\"form-group mr-1\">\r\n          <input type=\"number\" inputMode=\"numeric\" className=\"form-control\" onChange={this.handleChange.bind(this)}  placeholder=\"Amount\" name=\"amount\" value={this.state.amount} />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\" disabled={!this.valid()}>Create Record</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst AmountBox = ({ text, type, amount }) => {\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"card\">\r\n        <div className={`card-header bg-${type} text-white`}>\r\n          {text}\r\n        </div>\r\n        <div className=\"card-body\">\r\n          {amount}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AmountBox\r\n","import React, { Component } from 'react';\nimport Record from './Record';\nimport * as RecordsAPI from '../utils/RecordsAPI';\nimport RecordForm from './RecordForm';\nimport AmountBox from './AmountBox';\n\nclass Records extends Component {\n  constructor() {\n    super();\n    this.state = {\n      error: null,\n      isLoaded: false,\n      records: [],\n      isAsc:true,\n    }\n    this.compareBy.bind(this);\n    this.handleSortClick.bind(this);\n  }\n\n  componentDidMount() {\n    RecordsAPI.getAll().then(\n      response => this.setState({\n        records: response.data,\n        isLoaded: true\n      })\n    ).catch(\n      error => this.setState({\n        isLoaded: true,\n        error\n      })\n    )\n  }\n\n  addRecord(record) {\n    this.setState({\n      error: null,\n      isLoaded: true,\n      records: [\n        ...this.state.records,\n        record\n      ]\n    })\n  }\n\n  updateRecord(record, data) {\n    const recordIndex = this.state.records.indexOf(record);\n    const newRecords = this.state.records.map( (item, index) => {\n      if(index !== recordIndex) {\n        return item;\n      }\n      return {\n        ...item,\n        ...data\n      };\n    });\n    this.setState({\n      records: newRecords\n    });\n  }\n\n  deleteRecord(record) {\n    const recordIndex = this.state.records.indexOf(record);\n    const newRecords = this.state.records.filter( (item, index) => index !== recordIndex);\n    this.setState({\n      records: newRecords\n    });\n  }\n\n  credits() {\n    let credits = this.state.records.filter((record) => {\n      return record.amount >= 0;\n    })\n\n    return credits.reduce((prev, curr) => {\n      return prev + Number.parseInt(curr.amount, 0)\n    }, 0)\n  }\n\n  debits() {\n    let credits = this.state.records.filter((record) => {\n      return record.amount < 0;\n    })\n\n    return credits.reduce((prev, curr) => {\n      return prev + Number.parseInt(curr.amount, 0)\n    }, 0)\n  }\n\n  balance() {\n    return this.credits() + this.debits();\n  }\n\n  compareBy(key,isAsc) {\n\n    return function (a, b) {\n      \n      if(isAsc){\n        if (a[key] < b[key]) return -1;\n        if (a[key] > b[key]) return 1;\n        return 0;\n      }\n      else{\n        if (a[key] > b[key]) return -1;\n        if (a[key] < b[key]) return 1;\n        return 0;\n      }\n         \n    };\n  }\n \n  handleSortClick(key,isAsc) {\n    let arrayCopy = [...this.state.records];\n    arrayCopy.sort(this.compareBy(key,isAsc));\n    this.setState({\n      records: arrayCopy,\n      isAsc:  this.state.isAsc===true ?false :true      \n    });\n  }\n\n  render() {\n    const { error, isLoaded, records } = this.state;\n    let recordsComponent;\n\n    if (error) {\n      recordsComponent = <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      recordsComponent =  <div className=\"spinner-border text-primary\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                          </div>;\n    } else {\n      recordsComponent = (\n        <table className=\"table table-striped table-bordered\">\n          <thead>\n            <tr>\n              <th onClick={() => this.handleSortClick('date',this.state.isAsc)}>Date \n              <span className='fas fa-sort Head-sort-margin' ></span> \n              </th>\n              <th onClick={() => this.handleSortClick('title',this.state.isAsc)}>Title\n              <span className='fas fa-sort Head-sort-margin' ></span> \n              </th>\n              <th onClick={() => this.handleSortClick('amount',this.state.isAsc)}>Amount \n              <span className='fas fa-sort Head-sort-margin' ></span> \n              </th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {records.map((record) =>\n              (<Record\n                key={record.id}\n                record={record}\n                handleEditRecord={this.updateRecord.bind(this)}\n                handleDeleteRecord={this.deleteRecord.bind(this)}\n              />)\n            )}\n          </tbody>\n        </table>\n      );\n    }\n\n    return (\n      <div className=\"container\">\n        <h2 className=\"text-center\">Records</h2>\n        <hr className=\"my-2\"></hr>\n        <div className=\"row mb-3\">\n          <AmountBox text=\"Credit\" type=\"success\" amount={this.credits()} />\n          <AmountBox text=\"Debit\" type=\"danger\" amount={this.debits()} />\n          <AmountBox text=\"Balance\" type=\"info\" amount={this.balance()} />\n        </div>\n        <RecordForm handleNewRecord={this.addRecord.bind(this)} />\n        {recordsComponent}\n      </div>\n    );\n  }\n}\n\nexport default Records;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Records from './/components/Records';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Records />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}